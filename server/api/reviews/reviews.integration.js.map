{"version":3,"sources":["../../../../server/api/reviews/reviews.integration.js"],"names":[],"mappings":"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","file":"reviews.integration.js","sourcesContent":["'use strict';\n\nvar app = require('../..');\nimport request from 'supertest';\n\nvar newReviews;\n\ndescribe('Reviews API:', function() {\n\n  describe('GET /api/reviewss', function() {\n    var reviewss;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('/api/reviewss')\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          reviewss = res.body;\n          done();\n        });\n    });\n\n    it('should respond with JSON array', function() {\n      reviewss.should.be.instanceOf(Array);\n    });\n\n  });\n\n  describe('POST /api/reviewss', function() {\n    beforeEach(function(done) {\n      request(app)\n        .post('/api/reviewss')\n        .send({\n          name: 'New Reviews',\n          info: 'This is the brand new reviews!!!'\n        })\n        .expect(201)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          newReviews = res.body;\n          done();\n        });\n    });\n\n    it('should respond with the newly created reviews', function() {\n      newReviews.name.should.equal('New Reviews');\n      newReviews.info.should.equal('This is the brand new reviews!!!');\n    });\n\n  });\n\n  describe('GET /api/reviewss/:id', function() {\n    var reviews;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('/api/reviewss/' + newReviews._id)\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          reviews = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      reviews = {};\n    });\n\n    it('should respond with the requested reviews', function() {\n      reviews.name.should.equal('New Reviews');\n      reviews.info.should.equal('This is the brand new reviews!!!');\n    });\n\n  });\n\n  describe('PUT /api/reviewss/:id', function() {\n    var updatedReviews;\n\n    beforeEach(function(done) {\n      request(app)\n        .put('/api/reviewss/' + newReviews._id)\n        .send({\n          name: 'Updated Reviews',\n          info: 'This is the updated reviews!!!'\n        })\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end(function(err, res) {\n          if (err) {\n            return done(err);\n          }\n          updatedReviews = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      updatedReviews = {};\n    });\n\n    it('should respond with the updated reviews', function() {\n      updatedReviews.name.should.equal('Updated Reviews');\n      updatedReviews.info.should.equal('This is the updated reviews!!!');\n    });\n\n  });\n\n  describe('DELETE /api/reviewss/:id', function() {\n\n    it('should respond with 204 on successful removal', function(done) {\n      request(app)\n        .delete('/api/reviewss/' + newReviews._id)\n        .expect(204)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n\n    it('should respond with 404 when reviews does not exist', function(done) {\n      request(app)\n        .delete('/api/reviewss/' + newReviews._id)\n        .expect(404)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n\n  });\n\n});\n"]}